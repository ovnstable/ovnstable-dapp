{
  "address": "0x1b53E336D4DE91aC9360Ca7818Cc9a04118691A1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "portfolio",
          "type": "address"
        }
      ],
      "name": "PortfolioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetPrices",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountInVault",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcPriceInVault",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcPriceDenominator",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcSellPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "usdcBuyPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct IMark2Market.AssetPrices[]",
              "name": "assetPrices",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "totalUsdcPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMark2Market.TotalAssetPrices",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetPricesForBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "diffToTarget",
              "type": "int256"
            },
            {
              "internalType": "bool",
              "name": "targetIsZero",
              "type": "bool"
            }
          ],
          "internalType": "struct IMark2Market.BalanceAssetPrices[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "assetPricesForBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "diffToTarget",
              "type": "int256"
            },
            {
              "internalType": "bool",
              "name": "targetIsZero",
              "type": "bool"
            }
          ],
          "internalType": "struct IMark2Market.BalanceAssetPrices[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetPricesView",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountInVault",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "usdcPriceInVault",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "usdcPriceDenominator",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "usdcSellPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "usdcBuyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct IMark2Market.AssetPrices[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "portfolio",
      "outputs": [
        {
          "internalType": "contract Portfolio",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_portfolio",
          "type": "address"
        }
      ],
      "name": "setPortfolio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUsdcPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "solcInputHash": "7da9da9b5b4d3b891e5e08785b7156f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"portfolio\",\"type\":\"address\"}],\"name\":\"PortfolioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetPrices\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcPriceInVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcPriceDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcSellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcBuyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct IMark2Market.AssetPrices[]\",\"name\":\"assetPrices\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdcPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IMark2Market.TotalAssetPrices\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetPricesForBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"diffToTarget\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"targetIsZero\",\"type\":\"bool\"}],\"internalType\":\"struct IMark2Market.BalanceAssetPrices[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"assetPricesForBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"diffToTarget\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"targetIsZero\",\"type\":\"bool\"}],\"internalType\":\"struct IMark2Market.BalanceAssetPrices[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetPricesView\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcPriceInVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcPriceDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcSellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcBuyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct IMark2Market.AssetPrices[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portfolio\",\"outputs\":[{\"internalType\":\"contract Portfolio\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_portfolio\",\"type\":\"address\"}],\"name\":\"setPortfolio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsdcPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"assetPricesForBalance(address,uint256)\":{\"params\":{\"withdrawAmount\":\"Not normalized amount to withdraw\",\"withdrawToken\":\"Token to withdraw\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the mplementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Mark2Market.sol\":\"Mark2Market\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xdfe5444167c3b8cb94bb80044f56148151466d62a86b950c4b57c1ab8bdced7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb1503d6ad7d4251970bfc4fa2d7e6fa2c7716010a0b3d642bdc078cdbef5ecc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb0fba7a209e01ef5a75bd082cd31b46b417f8572ca87a08475aa60afa01b4801\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc28ec209735cd77cebec87be0ec4586d4cba9002011adf4346e374e60c367756\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the mplementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x551a4e7f1d30b1fdc6994a134ba80d6966921f80ddb192a6fb463d213a02d5a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8cd74cdb9a9b704bfd99b4c677f49a170f1b16235f59b4ede98db93ff92f702a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xed12e1c10c09054954b16a1b1f4250c4bbc0c7140d720777626fb5886a1a0e25\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8c5737e80521ac5e76c0d9d2cdb67647906fdadeb296644910eeecb31042e1da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x650712f855228b7cdeb90738d99dd33ff3a7c9770914ff03eb93f90218fe164b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\"},\"contracts/Mark2Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./interfaces/IMark2Market.sol\\\";\\nimport \\\"./interfaces/IPriceGetter.sol\\\";\\nimport \\\"./registries/Portfolio.sol\\\";\\nimport \\\"./Vault.sol\\\";\\n\\ncontract Mark2Market is IMark2Market, Initializable, AccessControlUpgradeable, UUPSUpgradeable{\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n\\n\\n    // ---  fields\\n\\n    Vault public vault;\\n    Portfolio public portfolio;\\n\\n    // ---  events\\n\\n    event VaultUpdated(address vault);\\n    event PortfolioUpdated(address portfolio);\\n\\n\\n    // ---  modifiers\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n\\n    // ---  setters\\n\\n    function setVault(address _vault) external onlyAdmin {\\n        require(_vault != address(0), \\\"Zero address not allowed\\\");\\n        vault = Vault(_vault);\\n        emit VaultUpdated(_vault);\\n    }\\n\\n    function setPortfolio(address _portfolio) external onlyAdmin {\\n        require(_portfolio != address(0), \\\"Zero address not allowed\\\");\\n        portfolio = Portfolio(_portfolio);\\n        emit PortfolioUpdated(_portfolio);\\n    }\\n\\n    // ---  logic\\n\\n\\n    function assetPricesView() public view returns(AssetPrices[] memory){\\n        return assetPrices().assetPrices;\\n    }\\n\\n    function assetPrices() public view override returns (TotalAssetPrices memory) {\\n        Portfolio.AssetInfo[] memory assetInfos = portfolio.getAllAssetInfos();\\n\\n        uint256 totalUsdcPrice = 0;\\n        uint256 count = assetInfos.length;\\n        AssetPrices[] memory assetPrices = new AssetPrices[](count);\\n        for (uint8 i = 0; i < count; i++) {\\n            Portfolio.AssetInfo memory assetInfo = assetInfos[i];\\n            uint256 amountInVault = _currentAmountInVault(assetInfo.asset);\\n\\n            IPriceGetter priceGetter = IPriceGetter(assetInfo.priceGetter);\\n\\n            uint256 usdcPriceDenominator = priceGetter.denominator();\\n            uint256 usdcSellPrice = priceGetter.getUsdcSellPrice();\\n            uint256 usdcBuyPrice = priceGetter.getUsdcBuyPrice();\\n\\n            // in decimals: 18 + 18 - 18 => 18\\n            uint256 usdcPriceInVault = (amountInVault * usdcSellPrice) / usdcPriceDenominator;\\n\\n            totalUsdcPrice += usdcPriceInVault;\\n\\n            assetPrices[i] = AssetPrices(\\n                assetInfo.asset,\\n                amountInVault,\\n                usdcPriceInVault,\\n                usdcPriceDenominator,\\n                usdcSellPrice,\\n                usdcBuyPrice,\\n                IERC20Metadata(assetInfo.asset).decimals(),\\n                IERC20Metadata(assetInfo.asset).name(),\\n                IERC20Metadata(assetInfo.asset).symbol()\\n            );\\n        }\\n\\n        TotalAssetPrices memory totalPrices = TotalAssetPrices(assetPrices, totalUsdcPrice);\\n\\n        return totalPrices;\\n    }\\n\\n    function totalUsdcPrice() public view override returns (uint256)\\n    {\\n        Portfolio.AssetWeight[] memory assetWeights = portfolio.getAllAssetWeights();\\n\\n        uint256 totalUsdcPrice = 0;\\n        uint256 count = assetWeights.length;\\n        for (uint8 i = 0; i < count; i++) {\\n            Portfolio.AssetWeight memory assetWeight = assetWeights[i];\\n\\n            uint256 amountInVault = _currentAmountInVault(assetWeight.asset);\\n\\n            Portfolio.AssetInfo memory assetInfo = portfolio.getAssetInfo(assetWeight.asset);\\n            IPriceGetter priceGetter = IPriceGetter(assetInfo.priceGetter);\\n\\n            uint256 usdcPriceDenominator = priceGetter.denominator();\\n            uint256 usdcSellPrice = priceGetter.getUsdcSellPrice();\\n\\n            // in decimals: 18 + 18 - 18 => 18\\n            uint256 usdcPriceInVault = (amountInVault * usdcSellPrice) / usdcPriceDenominator;\\n\\n            totalUsdcPrice += usdcPriceInVault;\\n        }\\n\\n        return totalUsdcPrice;\\n    }\\n\\n\\n    function assetPricesForBalance() external view override returns (BalanceAssetPrices[] memory) {\\n        return assetPricesForBalance(address(0), 0);\\n    }\\n\\n    /**\\n     * @param withdrawToken Token to withdraw\\n     * @param withdrawAmount Not normalized amount to withdraw\\n     */\\n    function assetPricesForBalance(address withdrawToken, uint256 withdrawAmount)\\n        public\\n        view\\n        override\\n        returns (BalanceAssetPrices[] memory)\\n    {\\n        if (withdrawToken != address(0)) {\\n            // normalize withdrawAmount to 18 decimals\\n            //TODO: denominator usage\\n            uint256 withdrawAmountDenominator = 10**(18 - IERC20Metadata(withdrawToken).decimals());\\n            withdrawAmount = withdrawAmount * withdrawAmountDenominator;\\n        }\\n\\n        uint256 totalUsdcPrice = totalUsdcPrice();\\n\\n        // 3. validate withdrawAmount\\n        // use `if` instead of `require` because less gas when need to build complex string for revert\\n        if (totalUsdcPrice < withdrawAmount) {\\n            revert(string(\\n                abi.encodePacked(\\n                    \\\"Withdraw more than total: \\\",\\n                    Strings.toString(withdrawAmount),\\n                    \\\" > \\\",\\n                    Strings.toString(totalUsdcPrice)\\n                )\\n            ));\\n        }\\n\\n        // 4. correct total with withdrawAmount\\n        totalUsdcPrice = totalUsdcPrice - withdrawAmount;\\n\\n        // 5. calc diffs to target values\\n        Portfolio.AssetWeight[] memory assetWeights = portfolio.getAllAssetWeights();\\n        uint256 count = assetWeights.length;\\n        BalanceAssetPrices[] memory assetPrices = new BalanceAssetPrices[](count);\\n        for (uint8 i = 0; i < count; i++) {\\n            Portfolio.AssetWeight memory assetWeight = assetWeights[i];\\n            int256 diffToTarget = 0;\\n            bool targetIsZero = false;\\n            (diffToTarget, targetIsZero) = _diffToTarget(totalUsdcPrice, assetWeight);\\n            // update diff for withdrawn token\\n            if (withdrawAmount > 0 && assetWeight.asset == withdrawToken) {\\n                diffToTarget = diffToTarget + int256(withdrawAmount);\\n            }\\n            assetPrices[i] = BalanceAssetPrices(\\n                assetWeight.asset,\\n                diffToTarget,\\n                targetIsZero\\n            );\\n        }\\n\\n        return assetPrices;\\n    }\\n\\n    /**\\n     * @param totalUsdcPrice - Total normilized to 10**18\\n     * @param assetWeight - Token address to calc\\n     * @return normalized to 10**18 signed diff amount and mark that mean that need sell all\\n     */\\n    function _diffToTarget(uint256 totalUsdcPrice, Portfolio.AssetWeight memory assetWeight)\\n        internal\\n        view\\n        returns (\\n            int256,\\n            bool\\n        )\\n    {\\n        address asset = assetWeight.asset;\\n\\n        uint256 targetUsdcAmount = (totalUsdcPrice * assetWeight.targetWeight) /\\n            portfolio.TOTAL_WEIGHT();\\n\\n        Portfolio.AssetInfo memory assetInfo = portfolio.getAssetInfo(asset);\\n        IPriceGetter priceGetter = IPriceGetter(assetInfo.priceGetter);\\n\\n        uint256 usdcPriceDenominator = priceGetter.denominator();\\n        uint256 usdcBuyPrice = priceGetter.getUsdcBuyPrice();\\n\\n        // in decimals: 18 * 18 / 18 => 18\\n        uint256 targetTokenAmount = (targetUsdcAmount * usdcPriceDenominator) / usdcBuyPrice;\\n\\n        // normalize currentAmount to 18 decimals\\n        uint256 currentAmount = _currentAmountInVault(asset);\\n\\n        bool targetIsZero;\\n        if (targetTokenAmount == 0) {\\n            targetIsZero = true;\\n        } else {\\n            targetIsZero = false;\\n        }\\n\\n        int256 diff = int256(targetTokenAmount) - int256(currentAmount);\\n        return (diff, targetIsZero);\\n    }\\n\\n    function _currentAmountInVault(address asset) internal view returns (uint256){\\n        // normalize currentAmount to 18 decimals\\n        uint256 currentAmount = IERC20(asset).balanceOf(address(vault));\\n        //TODO: denominator usage\\n        uint256 denominator = 10 ** (18 - IERC20Metadata(asset).decimals());\\n        currentAmount = currentAmount * denominator;\\n        return currentAmount;\\n    }\\n\\n\\n\\n\\n}\\n\",\"keccak256\":\"0x73791ffdf191e15ddb3649d584dac94817606fda5eb034f12dc64df01b6a13f8\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./connectors/aave/interfaces/IAaveIncentivesController.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n\\n/**\\n * Vault address is used as owner for all tokens for Overnights.\\n * So you able to use Vault address to check any tokens balances.\\n * Vault doesn't know about what it has and how mauch.\\n * Vault can contain any tokens but only IERC20 could be transfered\\n * in real work.\\n * NOTE: currently work with ETH/MATIC or other payments not realised.\\n * NOTE: not used SafeERC20 and it may be changed in future\\n */\\ncontract Vault is Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    // ---  fields\\n\\n    bytes32 public constant PORTFOLIO_MANAGER = keccak256(\\\"PORTFOLIO_MANAGER\\\");\\n    bytes32 public constant REWARD_MANAGER = keccak256(\\\"REWARD_MANAGER\\\");\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n\\n    // Only Vault can claiming aave rewards\\n    IAaveIncentivesController public aaveReward;\\n\\n    // ---  events\\n\\n    event PortfolioManagerUpdated(address portfolioManager);\\n    event RewardManagerUpdated(address rewardManager);\\n    event AaveRewardRemoved(address aaveReward);\\n\\n    // ---  modifiers\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyPortfolioManager() {\\n        require(hasRole(PORTFOLIO_MANAGER, msg.sender), \\\"Caller is not the PORTFOLIO_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyRewardManager() {\\n        require(hasRole(REWARD_MANAGER, msg.sender), \\\"Caller is not the REWARD_MANAGER\\\");\\n        _;\\n    }\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n    // ---  setters\\n\\n    function setPortfolioManager(address _portfolioManager) public onlyAdmin {\\n        require(_portfolioManager != address(0), \\\"Zero address not allowed\\\");\\n        grantRole(PORTFOLIO_MANAGER, _portfolioManager);\\n        emit PortfolioManagerUpdated(_portfolioManager);\\n    }\\n\\n    function setRewardManager(address _rewardManager) public onlyAdmin {\\n        require(_rewardManager != address(0), \\\"Zero address not allowed\\\");\\n        grantRole(REWARD_MANAGER, _rewardManager);\\n        emit RewardManagerUpdated(_rewardManager);\\n    }\\n\\n\\n    function setAaveReward(address _aaveReward) public onlyAdmin {\\n        require(_aaveReward != address(0), \\\"Zero address not allowed\\\");\\n        aaveReward = IAaveIncentivesController(_aaveReward);\\n        emit AaveRewardRemoved(_aaveReward);\\n    }\\n\\n    // ---  logic\\n\\n    function claimRewardAave(address[] calldata assets, uint256 amount) public onlyRewardManager {\\n        aaveReward.claimRewards(assets, amount, address(this));\\n    }\\n\\n\\n    /**\\n     * @dev proxy to IERC20().totalSupply();\\n     */\\n    function totalSupply(IERC20 token) external view returns (uint256) {\\n        return token.totalSupply();\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().balanceOf();\\n     */\\n    function balanceOf(IERC20 token, address account) external view returns (uint256) {\\n        return token.balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().allowance();\\n     */\\n    function allowance(\\n        IERC20 token,\\n        address owner,\\n        address spender\\n    ) external view returns (uint256) {\\n        return token.allowance(owner, spender);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().approve();\\n     */\\n    function approve(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) external onlyPortfolioManager returns (bool) {\\n        return token.approve(spender, amount);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().transfer();\\n     */\\n    function transfer(\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyPortfolioManager returns (bool) {\\n        return token.transfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev proxy to IERC20().transferFrom();\\n     */\\n    function transferFrom(\\n        IERC20 token,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyPortfolioManager returns (bool) {\\n        return token.transferFrom(sender, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9f0d9bfa83d3fd6bd62023631094f564ed63af95e19caf70f1f1bf86bf67116c\",\"license\":\"MIT\"},\"contracts/connectors/aave/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n\\n    event RewardsAccrued(address indexed user, uint256 amount);\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed to,\\n        address indexed claimer,\\n        uint256 amount\\n    );\\n\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /**\\n     * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n    function setClaimer(address user, address claimer) external;\\n\\n    /**\\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n    function getClaimer(address user) external view returns (address);\\n\\n    /**\\n     * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n\\n    /**\\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n    function handleAction(\\n        address asset,\\n        uint256 userBalance,\\n        uint256 totalSupply\\n    ) external;\\n\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n    function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n    /**\\n    * @dev for backward compatibility with previous implementation of the Incentives controller\\n  */\\n    function REWARD_TOKEN() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbf9877dc6ded4a81eb08f0db651e28b0789a03b38d1fe3afeb4e768894c66d77\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMark2Market.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IMark2Market {\\n    struct AssetPrices {\\n        address asset;\\n        uint256 amountInVault; // balance on Vault\\n        uint256 usdcPriceInVault; // current total price of balance at USDC\\n        //\\n        uint256 usdcPriceDenominator;\\n        uint256 usdcSellPrice;\\n        uint256 usdcBuyPrice;\\n        //\\n        uint256 decimals;\\n        string name;\\n        string symbol;\\n    }\\n\\n    struct TotalAssetPrices {\\n        AssetPrices[] assetPrices;\\n        uint256 totalUsdcPrice;\\n    }\\n\\n    struct BalanceAssetPrices {\\n        address asset;\\n        int256 diffToTarget; // diff usdcPriceInVault to target in portfolio\\n        bool targetIsZero; // mean that we should trade all tokens to zero ownership\\n    }\\n\\n    function assetPrices() external view returns (TotalAssetPrices memory);\\n\\n    function totalUsdcPrice() external view returns (uint256);\\n\\n    function assetPricesForBalance() external view returns (BalanceAssetPrices[] memory);\\n\\n    function assetPricesForBalance(address withdrawToken, uint256 withdrawAmount) external view returns (BalanceAssetPrices[] memory);\\n}\\n\",\"keccak256\":\"0x4bb763b2c3623fc2857547a5970e09789fc193590a005b6693d3df9545d9e69a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPriceGetter {\\n    /**\\n     * Token buy price at USDC. Amount of USDC we should spend to buy one token.\\n     * Returned value is [USDC/token]\\n     * Usage: tokenAmount = usdcAmount * denominator() / getUsdcBuyPrice()\\n     * Normilized to 10**18\\n     */\\n    function getUsdcBuyPrice() external view returns (uint256);\\n\\n    /**\\n     * Token sell price at USDC. Amount of USDC we got if sell one token.\\n     * Returned value is [USDC/token]\\n     * Usage: usdcAmount = tokenAmount * getUsdcSellPrice() / denominator()\\n     * Normilized to 10**18\\n     */\\n    function getUsdcSellPrice() external view returns (uint256);\\n\\n    /**\\n     * Denominator for normalization. Default 10**18.\\n     */\\n    function denominator() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ffb91797f2de81cf176b8ebe0be12d7250279b61f1ee7f8d37ae41e00ecb04e\",\"license\":\"MIT\"},\"contracts/registries/Portfolio.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract Portfolio is Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    uint256 public constant TOTAL_WEIGHT = 100000; // 100000 ~ 100%\\n\\n    mapping(address => uint256) public assetInfoPositions;\\n    AssetInfo[] public assetInfos;\\n    mapping(address => uint256) public assetWeightPositions;\\n    AssetWeight[] public assetWeights;\\n\\n    event UpdatedAssetWeight(\\n        uint256 index,\\n        address asset,\\n        uint256 minWeight,\\n        uint256 targetWeight,\\n        uint256 maxWeight\\n    );\\n    event UpdatedAssetInfo(uint256 index, address asset, address priceGetter);\\n\\n    struct AssetWeight {\\n        address asset;\\n        uint256 minWeight;\\n        uint256 targetWeight;\\n        uint256 maxWeight;\\n    }\\n\\n    struct AssetInfo {\\n        address asset;\\n        address priceGetter;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n    function setAssetInfos(AssetInfo[] calldata _assetInfos) external onlyAdmin {\\n        for (uint8 i = 0; i < _assetInfos.length; i++) {\\n            _addAssetInfoAt(_assetInfos[i], i);\\n        }\\n        // truncate array if needed\\n        if (assetInfos.length > _assetInfos.length) {\\n            uint256 removeCount = assetInfos.length - _assetInfos.length;\\n            for (uint8 i = 0; i < removeCount; i++) {\\n                //TODO: do we need remove from mapping?\\n                assetInfos.pop();\\n            }\\n        }\\n    }\\n\\n    function addAssetInfoAt(AssetInfo calldata assetInfo, uint256 index) external onlyAdmin {\\n        _addAssetInfoAt(assetInfo, index);\\n    }\\n\\n    function _addAssetInfoAt(AssetInfo calldata assetInfo, uint256 index) internal {\\n        uint256 currentlength = assetInfos.length;\\n        // expand array id needed\\n        if (currentlength == 0 || currentlength - 1 < index) {\\n            uint256 additionalCount = index - currentlength + 1;\\n            for (uint8 i = 0; i < additionalCount; i++) {\\n                assetInfos.push();\\n            }\\n        }\\n        assetInfos[index] = assetInfo;\\n        assetInfoPositions[assetInfo.asset] = index;\\n        emit UpdatedAssetInfo(index, assetInfo.asset, assetInfo.priceGetter);\\n    }\\n\\n    function setWeights(AssetWeight[] calldata _assetWeights) external onlyAdmin {\\n        uint256 totalTarget = 0;\\n        for (uint8 i = 0; i < _assetWeights.length; i++) {\\n            AssetWeight memory assetWeight = _assetWeights[i];\\n            require(assetWeight.asset != address(0), \\\"weight without asset\\\");\\n            require(\\n                assetWeight.minWeight <= assetWeight.targetWeight,\\n                \\\"minWeight shouldn't higher than targetWeight\\\"\\n            );\\n            require(\\n                assetWeight.targetWeight <= assetWeight.maxWeight,\\n                \\\"targetWeight shouldn't higher than maxWeight\\\"\\n            );\\n            totalTarget += assetWeight.targetWeight;\\n        }\\n        require(totalTarget == TOTAL_WEIGHT, \\\"Total target should equal to TOTAL_WEIGHT\\\");\\n\\n        for (uint8 i = 0; i < _assetWeights.length; i++) {\\n            _addWeightAt(_assetWeights[i], i);\\n            assetWeightPositions[assetWeights[i].asset] = i;\\n        }\\n\\n        // truncate if need\\n        if (assetWeights.length > _assetWeights.length) {\\n            uint256 removeCount = assetWeights.length - _assetWeights.length;\\n            for (uint8 i = 0; i < removeCount; i++) {\\n                assetWeights.pop();\\n            }\\n        }\\n    }\\n\\n    function _addWeightAt(AssetWeight memory assetWeight, uint256 index) internal {\\n        uint256 currentLength = assetWeights.length;\\n        // expand if need\\n        if (currentLength == 0 || currentLength - 1 < index) {\\n            uint256 additionalCount = index - currentLength + 1;\\n            for (uint8 i = 0; i < additionalCount; i++) {\\n                assetWeights.push();\\n            }\\n        }\\n        assetWeights[index] = assetWeight;\\n        emit UpdatedAssetWeight(\\n            index,\\n            assetWeight.asset,\\n            assetWeight.minWeight,\\n            assetWeight.targetWeight,\\n            assetWeight.maxWeight\\n        );\\n    }\\n\\n    function getAssetInfo(address asset) external view returns (AssetInfo memory) {\\n        return assetInfos[assetInfoPositions[asset]];\\n    }\\n\\n    function getAllAssetInfos() external view returns (AssetInfo[] memory) {\\n        return assetInfos;\\n    }\\n\\n    function getAssetWeight(address asset) external view returns (AssetWeight memory) {\\n        return assetWeights[assetWeightPositions[asset]];\\n    }\\n\\n    function getAllAssetWeights() external view returns (AssetWeight[] memory) {\\n        return assetWeights;\\n    }\\n}\\n\",\"keccak256\":\"0xce781392db44e322bdd0f1855ecc9f9d52c737480d72be10d5eeb389ed19f879\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff168062000033575060005460ff16155b6200009b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000be576000805461ffff19166101011790555b8015620000d1576000805461ff00191690555b5060805160601c612c4862000106600039600081816105c1015281816106010152818161068a01526106ca0152612c486000f3fe60806040526004361061011f5760003560e01c8063734bd75d116100a0578063a217fddf11610064578063a217fddf14610332578063d547741f14610347578063ec32bac714610367578063f72c0d8b14610389578063fbfa77cf146103bd57600080fd5b8063734bd75d146102a65780638129fc1c146102c65780638258c132146102db57806391d14854146102f05780639a707d871461031057600080fd5b806336568abe116100e757806336568abe146102115780633659cfe6146102315780634f1ef2861461025157806358a8316c146102645780636817031b1461028657600080fd5b806301ffc9a714610124578063044337ca1461015957806316ede0161461017b578063248a9ca3146101b35780632f2ff15d146101f1575b600080fd5b34801561013057600080fd5b5061014461013f36600461232a565b6103dd565b60405190151581526020015b60405180910390f35b34801561016557600080fd5b5061017961017436600461208f565b610414565b005b34801561018757600080fd5b5060fc5461019b906001600160a01b031681565b6040516001600160a01b039091168152602001610150565b3480156101bf57600080fd5b506101e36101ce3660046122e1565b60009081526065602052604090206001015490565b604051908152602001610150565b3480156101fd57600080fd5b5061017961020c3660046122fa565b61050d565b34801561021d57600080fd5b5061017961022c3660046122fa565b610538565b34801561023d57600080fd5b5061017961024c36600461208f565b6105b6565b61017961025f3660046120ac565b61067f565b34801561027057600080fd5b50610279610735565b604051610150919061260a565b34801561029257600080fd5b506101796102a136600461208f565b610747565b3480156102b257600080fd5b506102796102c136600461213e565b610834565b3480156102d257600080fd5b50610179610b22565b3480156102e757600080fd5b506101e3610bd2565b3480156102fc57600080fd5b5061014461030b3660046122fa565b610e64565b34801561031c57600080fd5b50610325610e8f565b6040516101509190612767565b34801561033e57600080fd5b506101e3600081565b34801561035357600080fd5b506101796103623660046122fa565b6113a9565b34801561037357600080fd5b5061037c6113cf565b604051610150919061253d565b34801561039557600080fd5b506101e37f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b3480156103c957600080fd5b5060fb5461019b906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061040e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61041f600033610e64565b6104675760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064015b60405180910390fd5b6001600160a01b0381166104b85760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b604482015260640161045e565b60fc80546001600160a01b0319166001600160a01b0383169081179091556040519081527fd26983974b34482bf34320997312ff880f8cc6e27b9136e9bf2140b1b6ef46a5906020015b60405180910390a150565b60008281526065602052604090206001015461052981336113df565b610533838361141d565b505050565b6001600160a01b03811633146105a85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161045e565b6105b282826114a3565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105ff5760405162461bcd60e51b815260040161045e90612681565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661063161150a565b6001600160a01b0316146106575760405162461bcd60e51b815260040161045e906126cd565b61066081611538565b6040805160008082526020820190925261067c91839190611563565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156106c85760405162461bcd60e51b815260040161045e90612681565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106fa61150a565b6001600160a01b0316146107205760405162461bcd60e51b815260040161045e906126cd565b61072982611538565b6105b282826001611563565b6060610742600080610834565b905090565b610752600033610e64565b6107955760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b604482015260640161045e565b6001600160a01b0381166107e65760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b604482015260640161045e565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527f161584aed96e7f34998117c9ad67e2d21ff46d2a42775c22b11ed282f3c7b2cd90602001610502565b60606001600160a01b038316156108de576000836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561088057600080fd5b505afa158015610894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b891906123f6565b6108c3906012612ac5565b6108ce90600a6129a5565b90506108da8184612a50565b9250505b60006108e8610bd2565b90508281101561093b576108fb836116ae565b610904826116ae565b604051602001610915929190612461565b60408051601f198184030181529082905262461bcd60e51b825261045e9160040161266e565b6109458382612aae565b9050600060fc60009054906101000a90046001600160a01b03166001600160a01b0316633ff94f046040518163ffffffff1660e01b815260040160006040518083038186803b15801561099757600080fd5b505afa1580156109ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d3919081019061220a565b80519091506000816001600160401b038111156109f2576109f2612bc0565b604051908082528060200260200182016040528015610a3d57816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610a105790505b50905060005b828160ff161015610b17576000848260ff1681518110610a6557610a65612baa565b60200260200101519050600080610a7c88846117b3565b90925090508915801590610aa557508a6001600160a01b031683600001516001600160a01b0316145b15610ab757610ab48a836128f5565b91505b604051806060016040528084600001516001600160a01b03168152602001838152602001821515815250858560ff1681518110610af657610af6612baa565b60200260200101819052505050508080610b0f90612b4a565b915050610a43565b509695505050505050565b600054610100900460ff1680610b3b575060005460ff16155b610b575760405162461bcd60e51b815260040161045e90612719565b600054610100900460ff16158015610b79576000805461ffff19166101011790555b610b81611a30565b610b89611a9f565b610b9460003361141d565b610bbe7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e33361141d565b801561067c576000805461ff001916905550565b60008060fc60009054906101000a90046001600160a01b03166001600160a01b0316633ff94f046040518163ffffffff1660e01b815260040160006040518083038186803b158015610c2357600080fd5b505afa158015610c37573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c5f919081019061220a565b8051909150600090815b818160ff161015610e5b576000848260ff1681518110610c8b57610c8b612baa565b602002602001015190506000610ca48260000151611afd565b60fc5483516040516357d6970b60e11b81526001600160a01b03918216600482015292935060009291169063afad2e1690602401604080518083038186803b158015610cef57600080fd5b505afa158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2791906123c1565b90506000816020015190506000816001600160a01b03166396ce07956040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6d57600080fd5b505afa158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da591906123dd565b90506000826001600160a01b0316632b8455f16040518163ffffffff1660e01b815260040160206040518083038186803b158015610de257600080fd5b505afa158015610df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1a91906123dd565b9050600082610e298388612a50565b610e33919061294e565b9050610e3f818b612936565b9950505050505050508080610e5390612b4a565b915050610c69565b50909392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60408051808201909152606081526000602082015260fc546040805163035d61bf60e31b815290516000926001600160a01b031691631aeb0df89160048083019286929190829003018186803b158015610ee857600080fd5b505afa158015610efc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f24919081019061216a565b805190915060009081816001600160401b03811115610f4557610f45612bc0565b604051908082528060200260200182016040528015610fce57816020015b610fbb60405180610120016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b815260200190600190039081610f635790505b50905060005b828160ff16101561138c576000858260ff1681518110610ff657610ff6612baa565b60200260200101519050600061100f8260000151611afd565b90506000826020015190506000816001600160a01b03166396ce07956040518163ffffffff1660e01b815260040160206040518083038186803b15801561105557600080fd5b505afa158015611069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108d91906123dd565b90506000826001600160a01b0316632b8455f16040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ca57600080fd5b505afa1580156110de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110291906123dd565b90506000836001600160a01b031663ea2497846040518163ffffffff1660e01b815260040160206040518083038186803b15801561113f57600080fd5b505afa158015611153573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117791906123dd565b90506000836111868488612a50565b611190919061294e565b905061119c818c612936565b9a5060405180610120016040528088600001516001600160a01b0316815260200187815260200182815260200185815260200184815260200183815260200188600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561121857600080fd5b505afa15801561122c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125091906123f6565b60ff16815260200188600001516001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561129557600080fd5b505afa1580156112a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112d19190810190612354565b815260200188600001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561131357600080fd5b505afa158015611327573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261134f9190810190612354565b815250898960ff168151811061136757611367612baa565b602002602001018190525050505050505050808061138490612b4a565b915050610fd4565b506040805180820190915290815260208101929092525092915050565b6000828152606560205260409020600101546113c581336113df565b61053383836114a3565b60606113d9610e8f565b51919050565b6113e98282610e64565b6105b257611401816001600160a01b03166014611c16565b61140c836020611c16565b6040516020016109159291906124c8565b6114278282610e64565b6105b25760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561145f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6114ad8282610e64565b156105b25760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e36105b281336113df565b600061156d61150a565b905061157884611db8565b6000835111806115855750815b15611596576115948484611e5d565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166116a757805460ff191660011781556040516001600160a01b038316602482015261161590869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052611e5d565b50805460ff1916815561162661150a565b6001600160a01b0316826001600160a01b03161461169e5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b606482015260840161045e565b6116a785611f48565b5050505050565b6060816116d25750506040805180820190915260018152600360fc1b602082015290565b8160005b81156116fc57806116e681612b2f565b91506116f59050600a8361294e565b91506116d6565b6000816001600160401b0381111561171657611716612bc0565b6040519080825280601f01601f191660200182016040528015611740576020820181803683370190505b5090505b84156117ab57611755600183612aae565b9150611762600a86612b6a565b61176d906030612936565b60f81b81838151811061178257611782612baa565b60200101906001600160f81b031916908160001a9053506117a4600a8661294e565b9450611744565b949350505050565b600080600083600001519050600060fc60009054906101000a90046001600160a01b03166001600160a01b031663ed2a2f9d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561180f57600080fd5b505afa158015611823573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184791906123dd565b60408601516118569088612a50565b611860919061294e565b60fc546040516357d6970b60e11b81526001600160a01b0385811660048301529293506000929091169063afad2e1690602401604080518083038186803b1580156118aa57600080fd5b505afa1580156118be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e291906123c1565b90506000816020015190506000816001600160a01b03166396ce07956040518163ffffffff1660e01b815260040160206040518083038186803b15801561192857600080fd5b505afa15801561193c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196091906123dd565b90506000826001600160a01b031663ea2497846040518163ffffffff1660e01b815260040160206040518083038186803b15801561199d57600080fd5b505afa1580156119b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d591906123dd565b90506000816119e48488612a50565b6119ee919061294e565b905060006119fb88611afd565b9050600082611a0c57506001611a10565b5060005b6000611a1c8385612a6f565b9e919d50909b505050505050505050505050565b600054610100900460ff1680611a49575060005460ff16155b611a655760405162461bcd60e51b815260040161045e90612719565b600054610100900460ff16158015611a87576000805461ffff19166101011790555b611a8f611f88565b611a97611f88565b610bbe611f88565b600054610100900460ff1680611ab8575060005460ff16155b611ad45760405162461bcd60e51b815260040161045e90612719565b600054610100900460ff16158015611a8f576000805461ffff1916610101179055611a97611f88565b60fb546040516370a0823160e01b81526001600160a01b0391821660048201526000918291908416906370a082319060240160206040518083038186803b158015611b4757600080fd5b505afa158015611b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7f91906123dd565b90506000836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611bbc57600080fd5b505afa158015611bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf491906123f6565b611bff906012612ac5565b611c0a90600a6129a5565b90506117ab8183612a50565b60606000611c25836002612a50565b611c30906002612936565b6001600160401b03811115611c4757611c47612bc0565b6040519080825280601f01601f191660200182016040528015611c71576020820181803683370190505b509050600360fc1b81600081518110611c8c57611c8c612baa565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611cbb57611cbb612baa565b60200101906001600160f81b031916908160001a9053506000611cdf846002612a50565b611cea906001612936565b90505b6001811115611d62576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d1e57611d1e612baa565b1a60f81b828281518110611d3457611d34612baa565b60200101906001600160f81b031916908160001a90535060049490941c93611d5b81612b18565b9050611ced565b508315611db15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161045e565b9392505050565b803b611e1c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161045e565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b611ebc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161045e565b600080846001600160a01b031684604051611ed79190612445565b600060405180830381855af49150503d8060008114611f12576040519150601f19603f3d011682016040523d82523d6000602084013e611f17565b606091505b5091509150611f3f8282604051806060016040528060278152602001612bec60279139611ff2565b95945050505050565b611f5181611db8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff1680611fa1575060005460ff16155b611fbd5760405162461bcd60e51b815260040161045e90612719565b600054610100900460ff16158015610bbe576000805461ffff1916610101179055801561067c576000805461ff001916905550565b60608315612001575081611db1565b8251156120115782518084602001fd5b8160405162461bcd60e51b815260040161045e919061266e565b60006040828403121561203d57600080fd5b604051604081018181106001600160401b038211171561205f5761205f612bc0565b8060405250809150825161207281612bd6565b8152602083015161208281612bd6565b6020919091015292915050565b6000602082840312156120a157600080fd5b8135611db181612bd6565b600080604083850312156120bf57600080fd5b82356120ca81612bd6565b915060208301356001600160401b038111156120e557600080fd5b8301601f810185136120f657600080fd5b8035612109612104826128ce565b61287b565b81815286602083850101111561211e57600080fd5b816020840160208301376000602083830101528093505050509250929050565b6000806040838503121561215157600080fd5b823561215c81612bd6565b946020939093013593505050565b6000602080838503121561217d57600080fd5b82516001600160401b0381111561219357600080fd5b8301601f810185136121a457600080fd5b80516121b2612104826128ab565b80828252848201915084840188868560061b87010111156121d257600080fd5b600094505b838510156121fe576121e9898261202b565b835260019490940193918501916040016121d7565b50979650505050505050565b6000602080838503121561221d57600080fd5b82516001600160401b0381111561223357600080fd5b8301601f8101851361224457600080fd5b8051612252612104826128ab565b80828252848201915084840188868560071b870101111561227257600080fd5b60009450845b848110156122d357608080838c031215612290578687fd5b612298612853565b83516122a381612bd6565b81528389015189820152604080850151908201526060808501519082015285529387019390910190600101612278565b509098975050505050505050565b6000602082840312156122f357600080fd5b5035919050565b6000806040838503121561230d57600080fd5b82359150602083013561231f81612bd6565b809150509250929050565b60006020828403121561233c57600080fd5b81356001600160e01b031981168114611db157600080fd5b60006020828403121561236657600080fd5b81516001600160401b0381111561237c57600080fd5b8201601f8101841361238d57600080fd5b805161239b612104826128ce565b8181528560208385010111156123b057600080fd5b611f3f826020830160208601612ae8565b6000604082840312156123d357600080fd5b611db1838361202b565b6000602082840312156123ef57600080fd5b5051919050565b60006020828403121561240857600080fd5b815160ff81168114611db157600080fd5b60008151808452612431816020860160208601612ae8565b601f01601f19169290920160200192915050565b60008251612457818460208701612ae8565b9190910192915050565b7f5769746864726177206d6f7265207468616e20746f74616c3a2000000000000081526000835161249981601a850160208801612ae8565b620101f160ed1b601a9184019182015283516124bc81601d840160208801612ae8565b01601d01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612500816017850160208801612ae8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612531816028840160208801612ae8565b01602801949350505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156122d357888303603f19018552815180516001600160a01b0316845261012081890151858a01528782015188860152606080830151908601526080808301519086015260a0808301519086015260c0808301519086015260e0808301518187018390526125d783880182612419565b9250505061010080830151925085820381870152506125f68183612419565b968901969450505090860190600101612564565b602080825282518282018190526000919060409081850190868401855b8281101561266157815180516001600160a01b03168552868101518786015285015115158585015260609093019290850190600101612627565b5091979650505050505050565b602081526000611db16020830184612419565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208083526060808401855160408085880152828251808552608094508489019150848160051b8a0101878501945060005b8281101561283d578a8203607f19018452855180516001600160a01b03168352610120818b0151848c01528682015187850152898201518a850152888201518985015260a0808301519085015260c0808301519085015260e08083015181860183905261280a83870182612419565b9250505061010080830151925084820381860152506128298183612419565b978b0197958b01959350505060010161279b565b5096909901519190970152509195945050505050565b604051608081016001600160401b038111828210171561287557612875612bc0565b60405290565b604051601f8201601f191681016001600160401b03811182821017156128a3576128a3612bc0565b604052919050565b60006001600160401b038211156128c4576128c4612bc0565b5060051b60200190565b60006001600160401b038211156128e7576128e7612bc0565b50601f01601f191660200190565b600080821280156001600160ff1b038490038513161561291757612917612b7e565b600160ff1b839003841281161561293057612930612b7e565b50500190565b6000821982111561294957612949612b7e565b500190565b60008261295d5761295d612b94565b500490565b600181815b8085111561299d57816000190482111561298357612983612b7e565b8085161561299057918102915b93841c9390800290612967565b509250929050565b6000611db160ff8416836000826129be5750600161040e565b816129cb5750600061040e565b81600181146129e157600281146129eb57612a07565b600191505061040e565b60ff8411156129fc576129fc612b7e565b50506001821b61040e565b5060208310610133831016604e8410600b8410161715612a2a575081810a61040e565b612a348383612962565b8060001904821115612a4857612a48612b7e565b029392505050565b6000816000190483118215151615612a6a57612a6a612b7e565b500290565b60008083128015600160ff1b850184121615612a8d57612a8d612b7e565b6001600160ff1b0384018313811615612aa857612aa8612b7e565b50500390565b600082821015612ac057612ac0612b7e565b500390565b600060ff821660ff841680821015612adf57612adf612b7e565b90039392505050565b60005b83811015612b03578181015183820152602001612aeb565b83811115612b12576000848401525b50505050565b600081612b2757612b27612b7e565b506000190190565b6000600019821415612b4357612b43612b7e565b5060010190565b600060ff821660ff811415612b6157612b61612b7e565b60010192915050565b600082612b7957612b79612b94565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461067c57600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122012086f29c7e72b4202ed96bce8069d7c9a342ad86afc95b263e61290b8e35d2c64736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "assetPricesForBalance(address,uint256)": {
        "params": {
          "withdrawAmount": "Not normalized amount to withdraw",
          "withdrawToken": "Token to withdraw"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the mplementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 823,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 826,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2943,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3865,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 806,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 973,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13762,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "vault",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(Vault)16845"
      },
      {
        "astId": 13765,
        "contract": "contracts/Mark2Market.sol:Mark2Market",
        "label": "portfolio",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(Portfolio)22916"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Portfolio)22916": {
        "encoding": "inplace",
        "label": "contract Portfolio",
        "numberOfBytes": "20"
      },
      "t_contract(Vault)16845": {
        "encoding": "inplace",
        "label": "contract Vault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/Mark2Market.sol:Mark2Market",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/Mark2Market.sol:Mark2Market",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}